// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package models


case class UseCaseType(annotation: Seq[models.AnnotationType] = Nil,
  description: models.DescriptionType,
  documentHistory: models.DocumentHistoryType,
  useCaseProperties: models.UseCasePropertiesType,
  mainFlow: models.MainSequenceType,
  alternateFlows: Option[models.AlternateFlowsType] = None,
  exceptionFlows: Option[models.ExceptionFlowsType] = None,
  businessRules: Option[models.RequirementsCollectionType] = None,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: String,
  name: String,
  modelVersion: String,
  attributes: Map[String, scalaxb.DataRecord[Any]])


case class UseCasePropertiesType(annotation: Seq[models.AnnotationType] = Nil,
  trigger: models.DescriptionType,
  goal: models.DescriptionType,
  primaryActor: Seq[models.ActorRefType] = Nil,
  secondaryActor: Seq[models.ActorRefType] = Nil,
  preRequisites: models.DescriptionType,
  successOutcome: models.DescriptionType,
  failureOutcome: models.DescriptionType,
  priority: String,
  complexity: BigInt,
  taxonomy: Seq[models.TaxonomyType] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]])


trait SequenceTypable {
  val annotation: Seq[models.AnnotationType]
  val step: Seq[models.StepType]
  val any: Seq[scalaxb.DataRecord[Any]]
  val attributes: Map[String, scalaxb.DataRecord[Any]]
}


case class SequenceType(annotation: Seq[models.AnnotationType] = Nil,
  step: Seq[models.StepType] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]]) extends SequenceTypable


/** 
                Represents the structure of the main flow
            
*/
case class MainSequenceType(annotation: Seq[models.AnnotationType] = Nil,
  step: Seq[models.StepType] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  end: scalaxb.DataRecord[Any],
  attributes: Map[String, scalaxb.DataRecord[Any]]) extends SequenceTypable


case class Rejoin(atStep: String)


/** 
                We need to add additional markers on these flows such that events occuring on the main flow can 
				reference these alternate and exception flows.
            
*/
case class AlternateSequenceType(annotation: Seq[models.AnnotationType] = Nil,
  step: Seq[models.StepType] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  alternatesequencetypeoption: scalaxb.DataRecord[Any],
  id: String,
  title: String,
  attributes: Map[String, scalaxb.DataRecord[Any]]) extends SequenceTypable

trait AlternateSequenceTypeOption

case class StepType(annotation: Seq[models.AnnotationType] = Nil,
  description: models.DescriptionType,
  proposedRelease: Option[models.ReleaseRefType] = None,
  refAlternateFlow: Seq[models.RefAlternateFlowsType] = Nil,
  refExceptionFlow: Seq[models.RefAlternateFlowsType] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  stepId: String,
  attributes: Map[String, scalaxb.DataRecord[Any]])


case class AlternateFlowsType(alternateFlow: Seq[models.AlternateSequenceType] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]])


case class RefAlternateFlowsType(refId: String,
  condition: String)


case class ExceptionFlowsType(exceptionFlow: Seq[models.AlternateSequenceType] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]])

