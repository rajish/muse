// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package models


case class Type(value: models.RequirementTypes,
  isu45feature: Option[Boolean] = None)


case class Parent(refId: String)

trait RequirementTypes

object RequirementTypes {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): RequirementTypes = value match {
    case "business" => Business
    case "success-criteria" => Successu45criteria
    case "assumption" => Assumption
    case "constraint" => Constraint
    case "functional" => Functional
    case "non-functional" => Nonu45functional
    case "architectural" => Architectural
    case "technical" => Technical
    case "inverse" => Inverse

  }
}

case object Business extends RequirementTypes { override def toString = "business" }
case object Successu45criteria extends RequirementTypes { override def toString = "success-criteria" }
case object Assumption extends RequirementTypes { override def toString = "assumption" }
case object Constraint extends RequirementTypes { override def toString = "constraint" }
case object Functional extends RequirementTypes { override def toString = "functional" }
case object Nonu45functional extends RequirementTypes { override def toString = "non-functional" }
case object Architectural extends RequirementTypes { override def toString = "architectural" }
case object Technical extends RequirementTypes { override def toString = "technical" }
case object Inverse extends RequirementTypes { override def toString = "inverse" }

trait Strength

object Strength {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): Strength = value match {
    case "shall" => Shall
    case "should" => Should
    case "may" => May

  }
}

case object Shall extends Strength { override def toString = "shall" }
case object Should extends Strength { override def toString = "should" }
case object May extends Strength { override def toString = "may" }


case class RequirementType(annotation: Seq[models.AnnotationType] = Nil,
  title: Option[models.TitleType] = None,
  description: models.DescriptionType,
  author: Option[String] = None,
  classification: Option[models.ClassificationType] = None,
  parent: Option[models.Parent] = None,
  requ45ref: Seq[Option[models.Requirementu45refType]] = Nil,
  stakeholderu45ref: Seq[Option[models.Stakeholderu45refType]] = Nil,
  externalu45link: Seq[Option[models.Externalu45linkType]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: String,
  version: Double,
  strength: models.Strength,
  creationu45date: String,
  modificationu45date: String,
  attributes: Map[String, scalaxb.DataRecord[Any]])


case class TitleType(mixed: Seq[scalaxb.DataRecord[Any]] = Nil)

trait TitleTypeOption

case class DescriptionType(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]])

trait DescriptionTypeOption

case class NarrativeType(value: String)


case class TaxonomyType(value: String,
  classifier: String)


case class ClassificationType(typeValue: models.Type,
  status: models.StatusType,
  packageValue: Seq[scalaxb.DataRecord[Any]] = Nil,
  taxonomy: Seq[models.TaxonomyType] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]])


case class PackageType(value: String)

trait StatusType

object StatusType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): StatusType = value match {
    case "proposed" => Proposed
    case "agreed" => Agreed
    case "onhold" => Onhold
    case "rejected" => Rejected
    case "withdrawn" => Withdrawn
    case "implemented" => Implemented
    case "partially-implemented" => Partiallyu45implemented
    case "operational" => Operational

  }
}

case object Proposed extends StatusType { override def toString = "proposed" }
case object Agreed extends StatusType { override def toString = "agreed" }
case object Onhold extends StatusType { override def toString = "onhold" }
case object Rejected extends StatusType { override def toString = "rejected" }
case object Withdrawn extends StatusType { override def toString = "withdrawn" }
case object Implemented extends StatusType { override def toString = "implemented" }
case object Partiallyu45implemented extends StatusType { override def toString = "partially-implemented" }
case object Operational extends StatusType { override def toString = "operational" }

trait AudienceType

object AudienceType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): AudienceType = value match {
    case "all" => AllType
    case "internal" => Internal
    case "client" => Client
    case "requirements" => RequirementsValue
    case "development" => Development
    case "design" => Design
    case "test" => Test

  }
}

case object AllType extends AudienceType { override def toString = "all" }
case object Internal extends AudienceType { override def toString = "internal" }
case object Client extends AudienceType { override def toString = "client" }
case object RequirementsValue extends AudienceType { override def toString = "requirements" }
case object Development extends AudienceType { override def toString = "development" }
case object Design extends AudienceType { override def toString = "design" }
case object Test extends AudienceType { override def toString = "test" }


case class Actoru45refType(refId: String) extends ReferenceTypeu45groupOption


case class Stakeholderu45refType(refId: String) extends ReferenceTypeu45groupOption


case class Externalu45linkType(refId: String,
  typeValue: String,
  href: Option[String] = None)


case class Documentu45historyType(version: Seq[models.VersionType] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  currentu45version: String,
  attributes: Map[String, scalaxb.DataRecord[Any]])


case class VersionType(revision: Double,
  author: String,
  changeu45date: String,
  description: models.DescriptionType,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]])


/** when referencing an existing requirement
*/
case class Requirementu45refType(value: String,
  refId: String) extends ReferenceTypeu45groupOption

trait Stereotype

object Stereotype {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): Stereotype = value match {
    case "include" => Include
    case "extend" => Extend
    case "generalize" => Generalize
    case "invoke" => Invoke
    case "precedes" => Precedes

  }
}

case object Include extends Stereotype { override def toString = "include" }
case object Extend extends Stereotype { override def toString = "extend" }
case object Generalize extends Stereotype { override def toString = "generalize" }
case object Invoke extends Stereotype { override def toString = "invoke" }
case object Precedes extends Stereotype { override def toString = "precedes" }


/** Used when referencing a use-case
*/
case class Useu45caseu45refType(value: String,
  refId: String,
  stereotype: Option[models.Stereotype] = None) extends ReferenceTypeu45groupOption


/** when referencing an existing requirement
*/
case class ReleaseRefType(value: String,
  refId: String)


/** Represents a collection of referenced requirements that are logically grouped together for documentation purposes
*/
case class RequirementsCollectionType(requ45ref: Seq[Option[models.Requirementu45refType]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]])


/** Re-usable data type that can be inserted elsewhere within other types to represent a clarification. The clarification should be a wholly owned subsiduary of the enclosing type instance.
*/
case class AnnotationType(description: models.DescriptionType,
  author: String,
  intendedu45audience: models.AudienceType,
  creationu45date: Option[String] = None,
  comments: Option[models.CommentsType] = None,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]])


case class CommentsType(comment: Seq[models.CommentType] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil)


/** Re-usable block that represents a comment.
*/
case class CommentType(description: Option[models.DescriptionType] = None,
  commentu45author: Option[String] = None,
  commentu45date: Option[String] = None,
  any: Seq[scalaxb.DataRecord[Any]] = Nil)


/** Describes a stakeholder of a requirement and/or use-case.
*/
case class StakeholderType(title: models.TitleType,
  description: models.DescriptionType,
  role: String,
  representative: Seq[String] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: String,
  attributes: Map[String, scalaxb.DataRecord[Any]])

trait ReferenceTypeu45groupOption
